.box{
  width: 400px;
  height: 400px;
  background-color: pink;
  margin: 100px auto;
  
  /* 鼠标样式 仅仅是样式调整 */
  cursor: pointer;
  cursor: move;
  cursor: text;
  cursor: not-allowed;
}
.box2{
  width: 200px;
  height: 200px;
  background-color: aqua;
  transition: 2s;
  /* visibility: visible; */
  opacity: 1;
}

.box:hover .box2{
  visibility: hidden;
  opacity: 0;
}

input{
  width: 50px;
  height: 50px;
  margin: 0;
  vertical-align:top;
  /* display: block; */
  /* display: none; */
  /* height:0;
  overflow: hidden; */
  /* opacity:0; */
  visibility: hidden;
}
input:checked~.box2{
  background-color: red;
}
.box3{
  width: 50px;
  height: 50px;
  background-color: black;
  /* visibility: visible; */
}
/* 
元素展示与隐藏方法
1. display:none; display:block/inline-block/inline;
   整个元素消失 不占文档流空间  事件不生效 因为元素都没了没法触发  不支持过渡效果
   不能通过子元素单独设置display:block;来实现展示

2. height:0; overflow:hidden;
  整个元素消失 不占文档流空间  事件不生效 因为高度没了没法触发 支持过渡
  不能通过子元素单独设置高度来实现展示 因为超出的全部隐藏了

3. opacity:0; opacity:1;
   只是元素的一个透明状态 任然占据原来的空间 事件可以生效  支持过渡
   父元素设置了数值为0 不能通过单独设置子元素为1来展示  因为子元素实际的透明度值= 祖先透明度 * 后代透明度  0乘以任何数都等于0

4. 定位 

5.visibility: hidden; 隐藏元素
  仍然占据文档流空间  只是状态被设置成了隐藏 与opacity:0;很像
  但是不能触发事件，会阻断事件（包括js事件 身上的事件不生效）
  可以通过子元素单独设置visibility: visible; 来实现子元素的展示 
  过渡会是一个延迟效果 而且鼠标移出时没有过渡
  可以使用visibility: hidden;配合opacity来实现平滑过渡且解除事件


 */
 /* 

 能说出精灵图/雪碧图 产生的目的
 没有精灵图时 一张图片需要想服务区请求一次资源 当我们有大量的图标需要请求多次 增加服务器的负载 不利于用户体验
  一张图片整合了许多小图标  只需要加载的时候请求一次就可以了

  图片底部默认会出现一条白边 类似解析空格 图片与inline-block非常相似
  给图片设置为
  display:block;
  vertical-align:top;
  */